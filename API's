project_name ="Project A"
status = "init"
time_option = "monthly"
start = "2019-02-02"
end = "2019-03-03"

def create_time_query(time_option=None,start=None,end=None):
    time_query = {}
    if time_option=='mothly':
        previous_date = (datetime.datetime.today() - relativedelta(months=2))
    if time_option=="yearly":
        
        previous_date = (datetime.datetime.today() - relativedelta(years=2))
        print(previous_date)
    if time_option=="custom" and start and end:
        start = datetime.datetime.strptime(start, "%Y-%m-%d")
        end = datetime.datetime.strptime(end, "%Y-%m-%d")
    if time_option ="quarterly":
        previous_date = (datetime.datetime.today - relativedelta(months=4))
    time_query= {'date' :  {'$gt' : previous_date, '$lt' : datetime.datetime.today()}}
        
    return time_query
    
    
    
    
def query_making(project_name=None,status=None,time_option=None,start=None,end=None,category=None):
    query = []
    if project_name: query.append({"project_name":project_name})
    if status: query.append({"status":status})
    if time_option:
        time_query = create_time_query(time_option,start,end)
        query.append(time_query)
    if category:
        query.append({"category":category})
    return {"$and" : query}


#projection.py
keywords = {"category":1,"keywords":1,"createdBy":1,"dateCreated":1,"lastDateUpdated":1,"_id":{"$toString":1}}
category = {"category":1,"keywords":1,"createdBy":1,"dateCreated":1,"lastDateUpdated":1}
sentiment = {"project_name":1,"category":1,"responsible_person":1,"%":1,"sentiment":1}
action = {"project_name":1,"action":1,"createdBy":1,"responsible_person":1,"steps":1}
role = {"user":1,"role":1,"project_name":1,"createdBy":1}
users = {"userName":1,"project_name":1,"responsible_person":1,"status":1}
feedback = {"project_name":1,"content":1,"sentiment":1,"status":1}
configuration = {"name":1,"type":1,"details":1,"status":1,"createdBy":1}


a = list(test_collection.find({}))
## here it will convert present objectId to string
import json
from bson import ObjectId,json_util
jsonables = json.loads(json_util.dumps(a))


#queries.py
def execute_find(query,projection,limit=None,page=None):
    page,limit = (0,5) if (not page) or (not limit) else (page,limit)
    res = list(test_collection.find(query,projection).skip(page*limit).limit(limit))
    #will return result of the query with objectID as string and count of those results
    return json.loads(json_util.dumps(res)),test_collection.count_documents(query)
    
    
#Database names
action: name,project,dateAssigned,dateModified,dueDate,responsiblePerson
feedback : name,content,sentiment,status,date,category,keyword
configuration: name,type,description,status,details-(email/website/ticketing_system,password,ports,server_name),createdBy,dateCreated
category: name,keywords,description,createdBy,dateCreated,dateModified
project: name,category,description,users,responsiblePerson,dateCreated,dateModified,status
user: name,password,emailId,role,project
role: name,description,dateCreated,dateModified,status
user_token: username,token,date_assigned,status(active,deactive)
data: name,content,sentiment,date,category,keyword,metadata(subject,type(email,review,DB...),subject)


def time_wise_sentiment(project_name=None,time_option=None):
    last_piece_match = query_making(project_name,time_option)
    unwind_query = get_unwind(variable=project_name) # will give {}
    last_piece_group = get_group(category=1,time_option="monthly",sentiment=1)
    
    match_query = {'$match' : {'$and' : [last_piece_match]}}
    group_query ={"$group": {"_id": last_piece_group, "count": { "$sum": 1 } }}

    time_wise = coll.aggregate([
        match_query,
        unwind_query,
        group_query,
        {"$sort" : {"_id.time_option" : 1}},
        {
            "$group" : {
                "_id" : "$_id.variable",
                "data" : {
                    "$push" : {
                        "time_option" : "$_id.time_option",
                        "sentiment" : "$_id.sentiment",
                        "count" : "$count"
                        }
                    },
                "total_count": { "$sum": "$count" }
                }
        },
        {
            "$project" :{
                "_id":0,
                "project":"$_id",
                "details" : "$data",
                "percentage" : { 
                    "$map": { 
                        "input": "$data", 
                        "as": "row", 

                        "in" : {"$substr": [ { "$multiply": [ { "$divide": [ "$$row.count", "$total_count"] }, 100 ] },0,4 ] }
                    }
                }
            }
        }
    ])
    return time_wise
    
    
    
    def get_unwind(variable=None):
    if variable == category:
        return {"$unwind" : "$category"}

def get_group(category=None,time_option=None,sentiment=None,project_name=None):
    query = {}
    final = {"_id" : query}
    if category: query[category] = "$"+category
    if time_option == "monthly":
         query["time_option"] = {"$month" : "$date"}
    elif time_option == "yearly":
        query["time_option"] = {"$year" : "$date"}
    elif time_option == "weekly":
        query["time_option"] = {"$week" : "$date"}
    if project_name : {"project_name" : project_name}
    if sentiment: {"sentiment": sentiment}
    return final
